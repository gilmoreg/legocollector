// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WatchBody
    click={[Function]}
    dispatch={[Function]}
    watch={
      Object {
        "image": "test",
        "stock_levels": Array [
          Object {
            "datetime": "test",
            "stock_level": 1,
          },
          Object {
            "datetime": "test",
            "stock_level": 1,
          },
        ],
        "title": "test",
        "url": "test",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Chart
          stock_levels={
            Array [
              Object {
                "datetime": "test",
                "stock_level": 1,
              },
              Object {
                "datetime": "test",
                "stock_level": 1,
              },
            ]
          }
        />,
        <div
          className="notifications"
        >
          <div
            className="label"
          >
            Notify me at
          </div>
          <input
            className="slider"
            id="notificatio n-threshold"
            max="100"
            min="1"
            onChange={[Function]}
            type="range"
            value={50}
          />
          <div
            className="value"
          >
            50
             left
          </div>
        </div>,
      ],
      "className": "WatchBody",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": null,
        "nodeType": "function",
        "props": Object {
          "stock_levels": Array [
            Object {
              "datetime": "test",
              "stock_level": 1,
            },
            Object {
              "datetime": "test",
              "stock_level": 1,
            },
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="label"
            >
              Notify me at
            </div>,
            <input
              className="slider"
              id="notificatio n-threshold"
              max="100"
              min="1"
              onChange={[Function]}
              type="range"
              value={50}
            />,
            <div
              className="value"
            >
              50
               left
            </div>,
          ],
          "className": "notifications",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": null,
            "nodeType": "host",
            "props": Object {
              "children": "Notify me at",
              "className": "label",
            },
            "ref": null,
            "rendered": "Notify me at",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": null,
            "nodeType": "host",
            "props": Object {
              "className": "slider",
              "id": "notificatio n-threshold",
              "max": "100",
              "min": "1",
              "onChange": [Function],
              "type": "range",
              "value": 50,
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": null,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                50,
                " left",
              ],
              "className": "value",
            },
            "ref": null,
            "rendered": Array [
              50,
              " left",
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Chart
            stock_levels={
              Array [
                Object {
                  "datetime": "test",
                  "stock_level": 1,
                },
                Object {
                  "datetime": "test",
                  "stock_level": 1,
                },
              ]
            }
          />,
          <div
            className="notifications"
          >
            <div
              className="label"
            >
              Notify me at
            </div>
            <input
              className="slider"
              id="notificatio n-threshold"
              max="100"
              min="1"
              onChange={[Function]}
              type="range"
              value={50}
            />
            <div
              className="value"
            >
              50
               left
            </div>
          </div>,
        ],
        "className": "WatchBody",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": null,
          "nodeType": "function",
          "props": Object {
            "stock_levels": Array [
              Object {
                "datetime": "test",
                "stock_level": 1,
              },
              Object {
                "datetime": "test",
                "stock_level": 1,
              },
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="label"
              >
                Notify me at
              </div>,
              <input
                className="slider"
                id="notificatio n-threshold"
                max="100"
                min="1"
                onChange={[Function]}
                type="range"
                value={50}
              />,
              <div
                className="value"
              >
                50
                 left
              </div>,
            ],
            "className": "notifications",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": null,
              "nodeType": "host",
              "props": Object {
                "children": "Notify me at",
                "className": "label",
              },
              "ref": null,
              "rendered": "Notify me at",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "host",
              "props": Object {
                "className": "slider",
                "id": "notificatio n-threshold",
                "max": "100",
                "min": "1",
                "onChange": [Function],
                "type": "range",
                "value": 50,
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  50,
                  " left",
                ],
                "className": "value",
              },
              "ref": null,
              "rendered": Array [
                50,
                " left",
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
